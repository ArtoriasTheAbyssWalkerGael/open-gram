/**
 * consume model file generated by CRF++ and segment given chinese text file
 *
 */

#include <unistd.h>
#include <cstring>
#include <climits>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include "crfpp.h"

using namespace std;

void usage()
{
    cout << "Usage crfseg [OPTIONS]\n"
        "-i<input file> stdin by default, should be encoded in UTF-8\n"
        "                the input file should be trimmed, so all spaces should be removed.\n"
        "-o<output file> stdout by default\n"
        "-m<model file> model file generated by CRF++\n";
}

int get_token(const char* str)
{
    if (0 < str[0] && str[0] < 0x7f) {
        return 3;
    } else {
        return 1;
    }
}

enum Tags {
    TAG_S,
    TAG_B,
    TAG_B2,
    TAG_B3,
    TAG_M,
    TAG_E
};

int segment(CRFPP::Tagger *tagger, const string& line, ofstream& of)
{
    vector<int> offsets;
    offsets.reserve(32);
    int ntoken = 0;
    int len = 0;
    for (const char *p = line.c_str(), *end = p + line.length(); p < end; p += len) {
        len = get_token(p);
        char token[16];
        token[len] = 0;
        tagger->add((const char*) memcpy(token, p, len));
        offsets.push_back(len);
        ++ntoken;
    }
    if (!tagger->parse()) {
        cerr << "CRF tagger failed to parse: " << line << endl;
        return -1;
    }
    
    int begin = 0;
    for (int i = 0; i < ntoken; ++i) {
        int tag = tagger->y(i);
        if (tag == TAG_S || tag == TAG_E) {
            of << ' ';
        }
        int end = offsets[i];
        of.write(& line[begin], end-begin);
        begin = end;
    }
    return ntoken;
}

int main(int argc, char *argv[])
{
    string model_fn;
    string input_fn("-");
    string output_fn;
    
    int opt;
    
    while ((opt = getopt(argc, argv, "i:o:m:"))) {
        switch (opt) {
        case 'i':
            input_fn = optarg;
            break;
        case 'o':
            output_fn = optarg;
            break;
        case 'm':
            output_fn = optarg;
            break;
        }
    }

    istream* is;
    ifstream ifs;
    if (input_fn == "-") {
        is = &cin;
    } else {
        ifs.open(input_fn.c_str());
        if (!ifs) {
            cerr << "failed to open input file: " << input_fn << endl;
            return -1;
        }
        is = &ifs;
    }

    char model_args[PATH_MAX];
    snprintf(model_args, sizeof(model_args), "-m %s", model_fn.c_str());
    CRFPP::Tagger *tagger = CRFPP::createTagger(model_args);
    if (!tagger) {
        cerr << "failed to create tagger: " << CRFPP::getTaggerError() << endl;
        return -1;
    }

    ofstream output(output_fn.c_str());
    if (!output) {
        cerr << "failed to open output file: " << output_fn << endl;
        return -1;
    }
    string line;
    while (getline(*is, line, '\n')) {
        if  (line.empty()) continue;
        tagger->clear();
        segment(tagger, line, output);
    }
}
